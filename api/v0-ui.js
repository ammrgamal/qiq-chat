// Optional V0 UI generator bridge
// POST /api/v0/ui { prompt: string, context?: object }
// Requires env V0_API_KEY and optional V0_API_ENDPOINT

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    res.setHeader('Allow', 'POST');
    return res.status(405).json({ error: 'Method not allowed' });
  }
  try {
    const apiKey = process.env.V0_API_KEY || '';
    const endpoint = process.env.V0_API_ENDPOINT || process.env.V0_ENDPOINT || '';
    const { prompt = '', context = {} } = req.body || {};
    if (!apiKey || !endpoint) {
      // Provide a simple fallback HTML snippet to preview the idea without calling V0
      const html = `
        <div style="font-family:system-ui,Segoe UI;line-height:1.5">
          <h2 style="margin:0 0 8px">V0 UI Preview (fallback)</h2>
          <p style="color:#6b7280">V0 API key or endpoint not configured. Set V0_API_KEY and V0_API_ENDPOINT to enable live generation.</p>
          <div style="display:grid;grid-template-columns:1fr 320px;gap:12px;margin-top:10px">
            <div style="border:1px solid #e5e7eb;border-radius:10px;padding:10px">
              <div style="height:280px;display:flex;align-items:center;justify-content:center;color:#6b7280">Chat area (generated by V0)</div>
            </div>
            <div style="border:1px solid #e5e7eb;border-radius:10px;padding:10px">
              <div style="height:280px;display:flex;align-items:center;justify-content:center;color:#6b7280">Quote sidebar (generated by V0)</div>
            </div>
          </div>
        </div>`;
      return res.status(200).json({ ok: true, provider: 'fallback', html });
    }

    // Call the configured V0 endpoint
    try {
      const r = await fetch(endpoint, {
        method: 'POST',
        headers: { 'content-type': 'application/json', 'authorization': `Bearer ${apiKey}` },
        body: JSON.stringify({ prompt, context })
      });
      if (!r.ok) {
        const text = await r.text().catch(()=> '');
        return res.status(r.status).json({ ok:false, provider:'v0', error: text || `HTTP ${r.status}` });
      }
      const data = await r.json().catch(()=>null);
      // Support either HTML string or structured response
      const html = typeof data === 'string' ? data : (data?.html || data?.content || '');
      return res.status(200).json({ ok:true, provider:'v0', html, raw:data });
    } catch (e) {
      return res.status(500).json({ ok:false, provider:'v0', error: String(e?.message||e) });
    }
  } catch (e) {
    return res.status(500).json({ error: e?.message || 'v0 error' });
  }
}
